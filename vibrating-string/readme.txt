This readme will describe how to work with the app I built for this assignment. Warning - it doesn't quite do what the assignment is asking for. I hope it won't be too big of a problem. 

Get it to work: Make sure the solver.html, solver.js, style.css files are both located in the same folder and that you have a working internet connection (as some scripts are imported from the web). Next, open the solver.html page in your browser of preference (it better not be IE...). From there on - play! Slide the slider to go to different time values, and if you want to change the input parameters h, k, T of the algorithm, enter them in the input fields and press the "Redo!" button.

As you can see, the parameter p is nowhere to be seen. This has an obvious explanation: the slider can display what the string looks like at all times between 0 and T, in increments of parameter k. 

How does this work? First, a table is created of appropriate size (it will host the y-position of the string at all possible x-position and time gridpoints). Next, the initial conditions and boundary conditions are populated. Then the first timestep's y-positions are populated (using equation 7 on page 472 in the handout packet). Next, the remainder of the table, from bottom to top, from left to right, is populated using equation 4 from the handout (p. 471). After this, the table is modified for the convenience of the graphing: instead of hosting just the y-position in each node, the x-position is also added. (TODO: integrate that into the original table creation). Finally, the graph is done. It's built on D3.js magic (a Javascript library for data visualization). Initially, only the data from the first row of the table is graphed - that's for timestep 0. On pageload, a slider is initialized. As soon as it is moved, data from a different row of the table is put onto the graph. If new values for the algorithm parameters are entered, the table is redone, the slider is calibrated, and the graph with the new parameters is up. 